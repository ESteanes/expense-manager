/*
Up API

The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TransactionResourceAttributesRoundUp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionResourceAttributesRoundUp{}

// TransactionResourceAttributesRoundUp Details of how this transaction was rounded-up. If no Round Up was applied this field will be `null`.
type TransactionResourceAttributesRoundUp struct {
	// The total amount of this Round Up, including any boosts, represented as a negative value.
	Amount       MoneyObject                       `json:"amount"`
	BoostPortion NullableRoundUpObjectBoostPortion `json:"boostPortion"`
}

type _TransactionResourceAttributesRoundUp TransactionResourceAttributesRoundUp

// NewTransactionResourceAttributesRoundUp instantiates a new TransactionResourceAttributesRoundUp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionResourceAttributesRoundUp(amount MoneyObject, boostPortion NullableRoundUpObjectBoostPortion) *TransactionResourceAttributesRoundUp {
	this := TransactionResourceAttributesRoundUp{}
	this.Amount = amount
	this.BoostPortion = boostPortion
	return &this
}

// NewTransactionResourceAttributesRoundUpWithDefaults instantiates a new TransactionResourceAttributesRoundUp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionResourceAttributesRoundUpWithDefaults() *TransactionResourceAttributesRoundUp {
	this := TransactionResourceAttributesRoundUp{}
	return &this
}

// GetAmount returns the Amount field value
func (o *TransactionResourceAttributesRoundUp) GetAmount() MoneyObject {
	if o == nil {
		var ret MoneyObject
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *TransactionResourceAttributesRoundUp) GetAmountOk() (*MoneyObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *TransactionResourceAttributesRoundUp) SetAmount(v MoneyObject) {
	o.Amount = v
}

// GetBoostPortion returns the BoostPortion field value
// If the value is explicit nil, the zero value for RoundUpObjectBoostPortion will be returned
func (o *TransactionResourceAttributesRoundUp) GetBoostPortion() RoundUpObjectBoostPortion {
	if o == nil || o.BoostPortion.Get() == nil {
		var ret RoundUpObjectBoostPortion
		return ret
	}

	return *o.BoostPortion.Get()
}

// GetBoostPortionOk returns a tuple with the BoostPortion field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionResourceAttributesRoundUp) GetBoostPortionOk() (*RoundUpObjectBoostPortion, bool) {
	if o == nil {
		return nil, false
	}
	return o.BoostPortion.Get(), o.BoostPortion.IsSet()
}

// SetBoostPortion sets field value
func (o *TransactionResourceAttributesRoundUp) SetBoostPortion(v RoundUpObjectBoostPortion) {
	o.BoostPortion.Set(&v)
}

func (o TransactionResourceAttributesRoundUp) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionResourceAttributesRoundUp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	toSerialize["boostPortion"] = o.BoostPortion.Get()
	return toSerialize, nil
}

func (o *TransactionResourceAttributesRoundUp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"amount",
		"boostPortion",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionResourceAttributesRoundUp := _TransactionResourceAttributesRoundUp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionResourceAttributesRoundUp)

	if err != nil {
		return err
	}

	*o = TransactionResourceAttributesRoundUp(varTransactionResourceAttributesRoundUp)

	return err
}

type NullableTransactionResourceAttributesRoundUp struct {
	value *TransactionResourceAttributesRoundUp
	isSet bool
}

func (v NullableTransactionResourceAttributesRoundUp) Get() *TransactionResourceAttributesRoundUp {
	return v.value
}

func (v *NullableTransactionResourceAttributesRoundUp) Set(val *TransactionResourceAttributesRoundUp) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionResourceAttributesRoundUp) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionResourceAttributesRoundUp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionResourceAttributesRoundUp(val *TransactionResourceAttributesRoundUp) *NullableTransactionResourceAttributesRoundUp {
	return &NullableTransactionResourceAttributesRoundUp{value: val, isSet: true}
}

func (v NullableTransactionResourceAttributesRoundUp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionResourceAttributesRoundUp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
