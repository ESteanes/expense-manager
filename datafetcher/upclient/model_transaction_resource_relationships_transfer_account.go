/*
Up API

The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package upclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TransactionResourceRelationshipsTransferAccount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionResourceRelationshipsTransferAccount{}

// TransactionResourceRelationshipsTransferAccount If this transaction is a transfer between accounts, this relationship will contain the account the transaction went to/came from. The `amount` field can be used to determine the direction of the transfer.
type TransactionResourceRelationshipsTransferAccount struct {
	Data  NullableTransactionResourceRelationshipsTransferAccountData  `json:"data"`
	Links NullableTransactionResourceRelationshipsTransferAccountLinks `json:"links,omitempty"`
}

type _TransactionResourceRelationshipsTransferAccount TransactionResourceRelationshipsTransferAccount

// NewTransactionResourceRelationshipsTransferAccount instantiates a new TransactionResourceRelationshipsTransferAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionResourceRelationshipsTransferAccount(data NullableTransactionResourceRelationshipsTransferAccountData) *TransactionResourceRelationshipsTransferAccount {
	this := TransactionResourceRelationshipsTransferAccount{}
	this.Data = data
	return &this
}

// NewTransactionResourceRelationshipsTransferAccountWithDefaults instantiates a new TransactionResourceRelationshipsTransferAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionResourceRelationshipsTransferAccountWithDefaults() *TransactionResourceRelationshipsTransferAccount {
	this := TransactionResourceRelationshipsTransferAccount{}
	return &this
}

// GetData returns the Data field value
// If the value is explicit nil, the zero value for TransactionResourceRelationshipsTransferAccountData will be returned
func (o *TransactionResourceRelationshipsTransferAccount) GetData() TransactionResourceRelationshipsTransferAccountData {
	if o == nil || o.Data.Get() == nil {
		var ret TransactionResourceRelationshipsTransferAccountData
		return ret
	}

	return *o.Data.Get()
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionResourceRelationshipsTransferAccount) GetDataOk() (*TransactionResourceRelationshipsTransferAccountData, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data.Get(), o.Data.IsSet()
}

// SetData sets field value
func (o *TransactionResourceRelationshipsTransferAccount) SetData(v TransactionResourceRelationshipsTransferAccountData) {
	o.Data.Set(&v)
}

// GetLinks returns the Links field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionResourceRelationshipsTransferAccount) GetLinks() TransactionResourceRelationshipsTransferAccountLinks {
	if o == nil || IsNil(o.Links.Get()) {
		var ret TransactionResourceRelationshipsTransferAccountLinks
		return ret
	}
	return *o.Links.Get()
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionResourceRelationshipsTransferAccount) GetLinksOk() (*TransactionResourceRelationshipsTransferAccountLinks, bool) {
	if o == nil {
		return nil, false
	}
	return o.Links.Get(), o.Links.IsSet()
}

// HasLinks returns a boolean if a field has been set.
func (o *TransactionResourceRelationshipsTransferAccount) HasLinks() bool {
	if o != nil && o.Links.IsSet() {
		return true
	}

	return false
}

// SetLinks gets a reference to the given NullableTransactionResourceRelationshipsTransferAccountLinks and assigns it to the Links field.
func (o *TransactionResourceRelationshipsTransferAccount) SetLinks(v TransactionResourceRelationshipsTransferAccountLinks) {
	o.Links.Set(&v)
}

// SetLinksNil sets the value for Links to be an explicit nil
func (o *TransactionResourceRelationshipsTransferAccount) SetLinksNil() {
	o.Links.Set(nil)
}

// UnsetLinks ensures that no value is present for Links, not even an explicit nil
func (o *TransactionResourceRelationshipsTransferAccount) UnsetLinks() {
	o.Links.Unset()
}

func (o TransactionResourceRelationshipsTransferAccount) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionResourceRelationshipsTransferAccount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data.Get()
	if o.Links.IsSet() {
		toSerialize["links"] = o.Links.Get()
	}
	return toSerialize, nil
}

func (o *TransactionResourceRelationshipsTransferAccount) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionResourceRelationshipsTransferAccount := _TransactionResourceRelationshipsTransferAccount{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionResourceRelationshipsTransferAccount)

	if err != nil {
		return err
	}

	*o = TransactionResourceRelationshipsTransferAccount(varTransactionResourceRelationshipsTransferAccount)

	return err
}

type NullableTransactionResourceRelationshipsTransferAccount struct {
	value *TransactionResourceRelationshipsTransferAccount
	isSet bool
}

func (v NullableTransactionResourceRelationshipsTransferAccount) Get() *TransactionResourceRelationshipsTransferAccount {
	return v.value
}

func (v *NullableTransactionResourceRelationshipsTransferAccount) Set(val *TransactionResourceRelationshipsTransferAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionResourceRelationshipsTransferAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionResourceRelationshipsTransferAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionResourceRelationshipsTransferAccount(val *TransactionResourceRelationshipsTransferAccount) *NullableTransactionResourceRelationshipsTransferAccount {
	return &NullableTransactionResourceRelationshipsTransferAccount{value: val, isSet: true}
}

func (v NullableTransactionResourceRelationshipsTransferAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionResourceRelationshipsTransferAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
