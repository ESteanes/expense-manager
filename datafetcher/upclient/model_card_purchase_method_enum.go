/*
Up API

The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning. 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package upclient

import (
	"encoding/json"
	"fmt"
)

// CardPurchaseMethodEnum Specifies the type of card charge. 
type CardPurchaseMethodEnum string

// List of CardPurchaseMethodEnum
const (
	BAR_CODE CardPurchaseMethodEnum = "BAR_CODE"
	OCR CardPurchaseMethodEnum = "OCR"
	CARD_PIN CardPurchaseMethodEnum = "CARD_PIN"
	CARD_DETAILS CardPurchaseMethodEnum = "CARD_DETAILS"
	CARD_ON_FILE CardPurchaseMethodEnum = "CARD_ON_FILE"
	ECOMMERCE CardPurchaseMethodEnum = "ECOMMERCE"
	MAGNETIC_STRIPE CardPurchaseMethodEnum = "MAGNETIC_STRIPE"
	CONTACTLESS CardPurchaseMethodEnum = "CONTACTLESS"
)

// All allowed values of CardPurchaseMethodEnum enum
var AllowedCardPurchaseMethodEnumEnumValues = []CardPurchaseMethodEnum{
	"BAR_CODE",
	"OCR",
	"CARD_PIN",
	"CARD_DETAILS",
	"CARD_ON_FILE",
	"ECOMMERCE",
	"MAGNETIC_STRIPE",
	"CONTACTLESS",
}

func (v *CardPurchaseMethodEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CardPurchaseMethodEnum(value)
	for _, existing := range AllowedCardPurchaseMethodEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CardPurchaseMethodEnum", value)
}

// NewCardPurchaseMethodEnumFromValue returns a pointer to a valid CardPurchaseMethodEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCardPurchaseMethodEnumFromValue(v string) (*CardPurchaseMethodEnum, error) {
	ev := CardPurchaseMethodEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CardPurchaseMethodEnum: valid values are %v", v, AllowedCardPurchaseMethodEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CardPurchaseMethodEnum) IsValid() bool {
	for _, existing := range AllowedCardPurchaseMethodEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CardPurchaseMethodEnum value
func (v CardPurchaseMethodEnum) Ptr() *CardPurchaseMethodEnum {
	return &v
}

type NullableCardPurchaseMethodEnum struct {
	value *CardPurchaseMethodEnum
	isSet bool
}

func (v NullableCardPurchaseMethodEnum) Get() *CardPurchaseMethodEnum {
	return v.value
}

func (v *NullableCardPurchaseMethodEnum) Set(val *CardPurchaseMethodEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableCardPurchaseMethodEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableCardPurchaseMethodEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCardPurchaseMethodEnum(val *CardPurchaseMethodEnum) *NullableCardPurchaseMethodEnum {
	return &NullableCardPurchaseMethodEnum{value: val, isSet: true}
}

func (v NullableCardPurchaseMethodEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCardPurchaseMethodEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

