/*
Up API

The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning. 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package upclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WebhookEventResource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebhookEventResource{}

// WebhookEventResource Provides the event data used in asynchronous webhook event callbacks to subscribed endpoints. Webhooks events have defined `eventType`s and may optionally relate to other resources within the Up API. 
type WebhookEventResource struct {
	// The type of this resource: `webhook-events`
	Type string `json:"type"`
	// The unique identifier for this event. This will remain constant across delivery retries. 
	Id string `json:"id"`
	Attributes WebhookEventResourceAttributes `json:"attributes"`
	Relationships WebhookEventResourceRelationships `json:"relationships"`
}

type _WebhookEventResource WebhookEventResource

// NewWebhookEventResource instantiates a new WebhookEventResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhookEventResource(type_ string, id string, attributes WebhookEventResourceAttributes, relationships WebhookEventResourceRelationships) *WebhookEventResource {
	this := WebhookEventResource{}
	this.Type = type_
	this.Id = id
	this.Attributes = attributes
	this.Relationships = relationships
	return &this
}

// NewWebhookEventResourceWithDefaults instantiates a new WebhookEventResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookEventResourceWithDefaults() *WebhookEventResource {
	this := WebhookEventResource{}
	return &this
}

// GetType returns the Type field value
func (o *WebhookEventResource) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *WebhookEventResource) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *WebhookEventResource) SetType(v string) {
	o.Type = v
}

// GetId returns the Id field value
func (o *WebhookEventResource) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *WebhookEventResource) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *WebhookEventResource) SetId(v string) {
	o.Id = v
}

// GetAttributes returns the Attributes field value
func (o *WebhookEventResource) GetAttributes() WebhookEventResourceAttributes {
	if o == nil {
		var ret WebhookEventResourceAttributes
		return ret
	}

	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value
// and a boolean to check if the value has been set.
func (o *WebhookEventResource) GetAttributesOk() (*WebhookEventResourceAttributes, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Attributes, true
}

// SetAttributes sets field value
func (o *WebhookEventResource) SetAttributes(v WebhookEventResourceAttributes) {
	o.Attributes = v
}

// GetRelationships returns the Relationships field value
func (o *WebhookEventResource) GetRelationships() WebhookEventResourceRelationships {
	if o == nil {
		var ret WebhookEventResourceRelationships
		return ret
	}

	return o.Relationships
}

// GetRelationshipsOk returns a tuple with the Relationships field value
// and a boolean to check if the value has been set.
func (o *WebhookEventResource) GetRelationshipsOk() (*WebhookEventResourceRelationships, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Relationships, true
}

// SetRelationships sets field value
func (o *WebhookEventResource) SetRelationships(v WebhookEventResourceRelationships) {
	o.Relationships = v
}

func (o WebhookEventResource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebhookEventResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["id"] = o.Id
	toSerialize["attributes"] = o.Attributes
	toSerialize["relationships"] = o.Relationships
	return toSerialize, nil
}

func (o *WebhookEventResource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"id",
		"attributes",
		"relationships",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWebhookEventResource := _WebhookEventResource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWebhookEventResource)

	if err != nil {
		return err
	}

	*o = WebhookEventResource(varWebhookEventResource)

	return err
}

type NullableWebhookEventResource struct {
	value *WebhookEventResource
	isSet bool
}

func (v NullableWebhookEventResource) Get() *WebhookEventResource {
	return v.value
}

func (v *NullableWebhookEventResource) Set(val *WebhookEventResource) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookEventResource) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookEventResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookEventResource(val *WebhookEventResource) *NullableWebhookEventResource {
	return &NullableWebhookEventResource{value: val, isSet: true}
}

func (v NullableWebhookEventResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookEventResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


