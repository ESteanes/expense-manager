/*
Up API

The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package upclient

import (
	"encoding/json"
)

// checks if the CustomerObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomerObject{}

// CustomerObject Information about the customer who performed the transaction.
type CustomerObject struct {
	// The customers Up Name.
	DisplayName *string `json:"displayName,omitempty"`
}

// NewCustomerObject instantiates a new CustomerObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomerObject() *CustomerObject {
	this := CustomerObject{}
	return &this
}

// NewCustomerObjectWithDefaults instantiates a new CustomerObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerObjectWithDefaults() *CustomerObject {
	this := CustomerObject{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *CustomerObject) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerObject) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *CustomerObject) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *CustomerObject) SetDisplayName(v string) {
	o.DisplayName = &v
}

func (o CustomerObject) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomerObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	return toSerialize, nil
}

type NullableCustomerObject struct {
	value *CustomerObject
	isSet bool
}

func (v NullableCustomerObject) Get() *CustomerObject {
	return v.value
}

func (v *NullableCustomerObject) Set(val *CustomerObject) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerObject) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerObject(val *CustomerObject) *NullableCustomerObject {
	return &NullableCustomerObject{value: val, isSet: true}
}

func (v NullableCustomerObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
