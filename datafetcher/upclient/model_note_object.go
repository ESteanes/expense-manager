/*
Up API

The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package upclient

import (
	"encoding/json"
)

// checks if the NoteObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NoteObject{}

// NoteObject A customer provided note about the transaction. Can only be provided by Up High subscribers.
type NoteObject struct {
	Text *string `json:"text,omitempty"`
}

// NewNoteObject instantiates a new NoteObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNoteObject() *NoteObject {
	this := NoteObject{}
	return &this
}

// NewNoteObjectWithDefaults instantiates a new NoteObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNoteObjectWithDefaults() *NoteObject {
	this := NoteObject{}
	return &this
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *NoteObject) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteObject) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *NoteObject) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *NoteObject) SetText(v string) {
	o.Text = &v
}

func (o NoteObject) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NoteObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	return toSerialize, nil
}

type NullableNoteObject struct {
	value *NoteObject
	isSet bool
}

func (v NullableNoteObject) Get() *NoteObject {
	return v.value
}

func (v *NullableNoteObject) Set(val *NoteObject) {
	v.value = val
	v.isSet = true
}

func (v NullableNoteObject) IsSet() bool {
	return v.isSet
}

func (v *NullableNoteObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNoteObject(val *NoteObject) *NullableNoteObject {
	return &NullableNoteObject{value: val, isSet: true}
}

func (v NullableNoteObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNoteObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
