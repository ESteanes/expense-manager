/*
Up API

The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package upclient

import (
	"encoding/json"
)

// checks if the TransactionResourceRelationshipsAttachment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionResourceRelationshipsAttachment{}

// TransactionResourceRelationshipsAttachment struct for TransactionResourceRelationshipsAttachment
type TransactionResourceRelationshipsAttachment struct {
	Data  NullableTransactionResourceRelationshipsAttachmentData `json:"data,omitempty"`
	Links *AccountResourceRelationshipsTransactionsLinks         `json:"links,omitempty"`
}

// NewTransactionResourceRelationshipsAttachment instantiates a new TransactionResourceRelationshipsAttachment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionResourceRelationshipsAttachment() *TransactionResourceRelationshipsAttachment {
	this := TransactionResourceRelationshipsAttachment{}
	return &this
}

// NewTransactionResourceRelationshipsAttachmentWithDefaults instantiates a new TransactionResourceRelationshipsAttachment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionResourceRelationshipsAttachmentWithDefaults() *TransactionResourceRelationshipsAttachment {
	this := TransactionResourceRelationshipsAttachment{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionResourceRelationshipsAttachment) GetData() TransactionResourceRelationshipsAttachmentData {
	if o == nil || IsNil(o.Data.Get()) {
		var ret TransactionResourceRelationshipsAttachmentData
		return ret
	}
	return *o.Data.Get()
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionResourceRelationshipsAttachment) GetDataOk() (*TransactionResourceRelationshipsAttachmentData, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data.Get(), o.Data.IsSet()
}

// HasData returns a boolean if a field has been set.
func (o *TransactionResourceRelationshipsAttachment) HasData() bool {
	if o != nil && o.Data.IsSet() {
		return true
	}

	return false
}

// SetData gets a reference to the given NullableTransactionResourceRelationshipsAttachmentData and assigns it to the Data field.
func (o *TransactionResourceRelationshipsAttachment) SetData(v TransactionResourceRelationshipsAttachmentData) {
	o.Data.Set(&v)
}

// SetDataNil sets the value for Data to be an explicit nil
func (o *TransactionResourceRelationshipsAttachment) SetDataNil() {
	o.Data.Set(nil)
}

// UnsetData ensures that no value is present for Data, not even an explicit nil
func (o *TransactionResourceRelationshipsAttachment) UnsetData() {
	o.Data.Unset()
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *TransactionResourceRelationshipsAttachment) GetLinks() AccountResourceRelationshipsTransactionsLinks {
	if o == nil || IsNil(o.Links) {
		var ret AccountResourceRelationshipsTransactionsLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionResourceRelationshipsAttachment) GetLinksOk() (*AccountResourceRelationshipsTransactionsLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *TransactionResourceRelationshipsAttachment) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given AccountResourceRelationshipsTransactionsLinks and assigns it to the Links field.
func (o *TransactionResourceRelationshipsAttachment) SetLinks(v AccountResourceRelationshipsTransactionsLinks) {
	o.Links = &v
}

func (o TransactionResourceRelationshipsAttachment) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionResourceRelationshipsAttachment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Data.IsSet() {
		toSerialize["data"] = o.Data.Get()
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	return toSerialize, nil
}

type NullableTransactionResourceRelationshipsAttachment struct {
	value *TransactionResourceRelationshipsAttachment
	isSet bool
}

func (v NullableTransactionResourceRelationshipsAttachment) Get() *TransactionResourceRelationshipsAttachment {
	return v.value
}

func (v *NullableTransactionResourceRelationshipsAttachment) Set(val *TransactionResourceRelationshipsAttachment) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionResourceRelationshipsAttachment) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionResourceRelationshipsAttachment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionResourceRelationshipsAttachment(val *TransactionResourceRelationshipsAttachment) *NullableTransactionResourceRelationshipsAttachment {
	return &NullableTransactionResourceRelationshipsAttachment{value: val, isSet: true}
}

func (v NullableTransactionResourceRelationshipsAttachment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionResourceRelationshipsAttachment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
