package templates

import (
	"github.com/esteanes/expense-manager/datafetcher/functions"
	"github.com/esteanes/expense-manager/datafetcher/upclient"
	"strconv"
	"time"
)

func getMessage(transaction upclient.TransactionResource) string {
	maybeString := transaction.Attributes.Message.Get()
	if maybeString == nil {
		return ""
	}
	return *maybeString
}

func getCardPurchase(transaction upclient.TransactionResource) string {
	maybeCardPurchase := transaction.Attributes.CardPurchaseMethod.Get()
	if maybeCardPurchase == nil {
		return ""
	}
	return string(maybeCardPurchase.Method)
}

func getCardPurchaseNumber(transaction upclient.TransactionResource) string {
	maybeCardPurchase := transaction.Attributes.CardPurchaseMethod.Get()
	if maybeCardPurchase == nil {
		return ""
	}
	maybePurchaseNumber := maybeCardPurchase.CardNumberSuffix.Get()
	if maybePurchaseNumber == nil {
		return ""
	}
	return *maybePurchaseNumber
}

func getCategory(transaction upclient.TransactionResource) string {
	maybeCategory := transaction.GetRelationships().Category.Data.Get()
	if maybeCategory == nil {
		return ""
	}
	return maybeCategory.Id

}

func getDateOrDefault(dateTime *time.Time, defaultTime time.Time) string {
	if dateTime == nil {
		return defaultTime.Format("2006-01-02")
	}
	return dateTime.Format("2006-01-02")
}

templ TransactionsTable(transactions chan upclient.TransactionResource) {
	<div class="container mx-auto p-8">
		<h1 class="text-4xl font-bold mb-6">Transactions</h1>
		<button id="downloadButton" class="px-6 py-2 bg-blue-500 text-white font-semibold rounded-lg hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400 flex items-center justify-center">
			<span id="buttonText">Download Content</span>
			<svg id="loadingSpinner" class="hidden animate-spin h-5 w-5 ml-2 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
				<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
				<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path>
			</svg>
		</button>
		<div class="overflow-y-auto max-h-96 border border-gray-200 rounded-lg">
			<table class="min-w-full table-auto bg-gray-50 border border-gray-200 p-10">
				<thead class="bg-gray-200">
					<tr>
						<th class="bg-gray-200 px-4 py-2 text-left border-b border-gray-300 sticky top-0">Transaction Amount</th>
						<th class="bg-gray-200 px-4 py-2 text-left border-b border-gray-300 sticky top-0">Description</th>
						<th class="bg-gray-200 px-4 py-2 text-left border-b border-gray-300 sticky top-0">Status</th>
						<th class="bg-gray-200 px-4 py-2 text-left border-b border-gray-300 sticky top-0">Time</th>
						<th class="bg-gray-200 px-4 py-2 text-left border-b border-gray-300 sticky top-0">Message</th>
						<th class="bg-gray-200 px-4 py-2 text-left border-b border-gray-300 sticky top-0">Category</th>
						<th class="bg-gray-200 px-4 py-2 text-left border-b border-gray-300 sticky top-0">Purchase Method</th>
						<th class="bg-gray-200 px-4 py-2 text-left border-b border-gray-300 sticky top-0">Card Number</th>
					</tr>
				</thead>
				<tbody class="bg-grey-light">
					for transaction := range(transactions) {
						@templ.Flush() {
							<tr class="hover:bg-yellow-400">
								<td class="px-4 py-2 border-b border-gray-300">{ transaction.Attributes.Amount.Value }</td>
								<td class="px-4 py-2 border-b border-gray-300">{ transaction.Attributes.Description }</td>
								<td class="px-4 py-2 border-b border-gray-300">{ string(transaction.Attributes.Status) }</td>
								<td class="px-4 py-2 border-b border-gray-300">{ transaction.Attributes.CreatedAt.String() }</td>
								<td class="px-4 py-2 border-b border-gray-300">{ getMessage(transaction) }</td>
								<td class="px-4 py-2 border-b border-gray-300">{ getCategory(transaction) }</td>
								<td class="px-4 py-2 border-b border-gray-300">{ getCardPurchase(transaction) }</td>
								<td class="px-4 py-2 border-b border-gray-300">{ getCardPurchaseNumber(transaction) }</td>
							</tr>
						}
					}
				</tbody>
			</table>
		</div>
	</div>
	<script>
        document.getElementById('downloadButton').addEventListener('click', function() {
            const startDateInput = document.getElementById('start-date');
            const endDateInput = document.getElementById('end-date');
            const startDate = new Date(startDateInput.value).toISOString();
            const endDate = new Date(endDateInput.value).toISOString();
            const numTransactions = document.getElementById('slider').value;

            // Build the URL with query parameters
            const url = new URL('/api/v1/transactions/csv', window.location.origin);
            if (startDate) {
                url.searchParams.set('startDate', startDate);
            }
            if (endDate) {
                url.searchParams.set('endDate', endDate);
            }
            url.searchParams.set('numTransactions', numTransactions);
            url.searchParams.set('accountId', new URLSearchParams(window.location.search).get("accountId"))

            // Fetch the file with the generated URL
            fetch(url, {
                method: 'GET',
                headers: {
                    // Add any headers if necessary
                }
            })
            .then(response => response.blob())  // Convert to blob
            .then(blob => {
                // Create a URL for the blob object
                const downloadUrl = window.URL.createObjectURL(blob);

                // Create a temporary <a> element for the download
                const a = document.createElement('a');
                a.href = downloadUrl;
                a.download = 'upbank-downloads.csv';  // Specify the filename
                document.body.appendChild(a);

                // Trigger the download
                a.click();

                // Clean up
                a.remove();
                window.URL.revokeObjectURL(downloadUrl);
            })
            .catch(error => console.error('Download failed', error));
        });
    </script>
}

templ numTransactionSlider(numTransactions string) {
	<div class="p-6 bg-white rounded-lg shadow-lg">
		<label for="slider" class="block text-lg font-semibold mb-4">Number of Transactions</label>
		<!-- Slider -->
		<input type="range" id="slider" min="1" max="10000" value={ numTransactions } class="w-full h-2 bg-gray-300 rounded-lg appearance-none cursor-pointer"/>
		<!-- Displayed value as an input field -->
		<div class="mt-4 flex items-center space-x-2">
			<label for="sliderValue" class="text-sm font-medium text-gray-700">Value:</label>
			<input type="number" id="sliderValue" value={ numTransactions } min="1" max="100" class="w-32 p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"/>
		</div>
		<!-- Button to grab the slider value and refresh the page -->
		<button id="submitButton" class="mt-6 px-4 py-2 bg-blue-500 text-white font-semibold rounded-lg hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400">
			Set Transactions
		</button>
	</div>
	<script>
        const slider = document.getElementById('slider');
        const sliderValueInput = document.getElementById('sliderValue');
        const submitButton = document.getElementById('submitButton');

        // Sync input field when slider changes
        slider.addEventListener('input', function() {
            sliderValueInput.value = slider.value;
        });

        // Sync slider when input field changes
        sliderValueInput.addEventListener('input', function() {
            if (sliderValueInput.value >= slider.min && sliderValueInput.value <= slider.max) {
                slider.value = sliderValueInput.value;
            }
        });

        // On button click, update URL with the query parameter and refresh the page
        submitButton.addEventListener('click', function() {
            const sliderValue = slider.value;
            const url = new URL(window.location.href);
            url.searchParams.set('numTransactions', sliderValue);
            window.location.href = url.toString(); // Refresh the page with the updated query parameter
        });
    </script>
}

templ dateSelector(startDate string, endDate string) {
	<div class="p-6 bg-white rounded-lg shadow-lg max-w-2xl">
		<h2 class="text-xl font-bold mb-4 text-gray-700">Select Date Range</h2>
		<div class="flex space-x-4">
			<!-- Start Date Input -->
			<div class="flex flex-col">
				<label for="start-date" class="mb-2 text-sm font-medium text-gray-600">Start Date</label>
				<input type="date" id="start-date" value={ startDate } class="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"/>
			</div>
			<!-- End Date Input -->
			<div class="flex flex-col">
				<label for="end-date" class="mb-2 text-sm font-medium text-gray-600">End Date</label>
				<input type="date" id="end-date" value={ endDate } class="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"/>
			</div>
		</div>
		<button id="dateSubmitButton" class="mt-4 px-6 py-2 bg-blue-500 text-white font-semibold rounded-lg hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400">
			Submit
		</button>
		<script>
        // On button click, update URL with the query parameters for startDate and endDate and refresh the page
        dateSubmitButton.addEventListener('click', function() {
            const startDateInput = document.getElementById('start-date');
            const endDateInput = document.getElementById('end-date');
            const dateSubmitButton = document.getElementById('dateSubmitButton');
            const startDate = new Date(startDateInput.value).toISOString();
            const endDate = new Date(endDateInput.value).toISOString();

            // Create a new URL object
            const url = new URL(window.location.href);

            // Add or update the query parameters for startDate and endDate
            if (startDate) {
                url.searchParams.set('startDate', startDate);
            }
            if (endDate) {
                url.searchParams.set('endDate', endDate);
            }
            if (startDate == null && endDate == null) {
                return;
            }

            // Refresh the page with the updated URL
            window.location.href = url.toString();
        });
    </script>
	</div>
}

templ Transactions(title string, transactions chan upclient.TransactionResource, accounts chan upclient.AccountResource, queryParams *functions.QueryParams) {
	@Base(title) {
		@GridOrganiser() {
			@AccountButtons(accounts, false)
			@numTransactionSlider(strconv.Itoa(int(*queryParams.NumTransactions)))
			@dateSelector(getDateOrDefault(queryParams.StartDate, time.Now().AddDate(0, 0, -1)), getDateOrDefault(queryParams.EndDate, time.Now()))
		}
		@TransactionsTable(transactions)
	}
}
